// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealState.Infrastructure.Data.Context;

#nullable disable

namespace RealState.Infrastructure.Migrations
{
    [DbContext(typeof(RealStateContext))]
    partial class RealStateContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RealState.Domain.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nationality")
                        .HasColumnType("int");

                    b.Property<int>("SSN")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admin");

                    b.HasData(
                        new
                        {
                            Id = 32,
                            FName = "Sandy",
                            LName = "Doe",
                            Nationality = 0,
                            SSN = 0,
                            UserId = "1381877e-4124-4662-b3cc-7ed2a9176fe4"
                        });
                });

            modelBuilder.Entity("RealState.Domain.Entities.Appartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppartmentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<int?>("RequestId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RequestId")
                        .IsUnique();

                    b.HasIndex("RequestId1")
                        .IsUnique()
                        .HasFilter("[RequestId1] IS NOT NULL");

                    b.ToTable("Appartments");
                });

            modelBuilder.Entity("RealState.Domain.Entities.AppartmentArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppartmentId")
                        .HasColumnType("int");

                    b.Property<string>("AvailableAppartmentAreas")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppartmentId");

                    b.ToTable("AppartmentAreas");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Auditor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nationality")
                        .HasColumnType("int");

                    b.Property<int>("SSN")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Auditors");

                    b.HasData(
                        new
                        {
                            Id = 5,
                            CompanyId = 1,
                            FName = "Jackley",
                            LName = "Doe",
                            Nationality = 0,
                            SSN = 0,
                            UserId = "1b8e4523-e299-42b7-aeeb-fd4577402407"
                        });
                });

            modelBuilder.Entity("RealState.Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GovernorateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nationality")
                        .HasColumnType("int");

                    b.Property<string>("SSN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 102,
                            FName = "John",
                            LName = "Doe",
                            Nationality = 0,
                            SSN = "123-45-6789",
                            UserId = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c"
                        });
                });

            modelBuilder.Entity("RealState.Domain.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Company1"
                        });
                });

            modelBuilder.Entity("RealState.Domain.Entities.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Governorates");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Request", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<int?>("AppartmentArea")
                        .HasColumnType("int");

                    b.Property<decimal>("Area")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AuditorId")
                        .HasColumnType("int");

                    b.Property<string>("Building")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Fees")
                        .HasColumnType("real");

                    b.Property<int?>("FloorCount")
                        .HasColumnType("int");

                    b.Property<string>("OwnerAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SurveyerId")
                        .HasColumnType("int");

                    b.Property<string>("UnitNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UnitTypeId")
                        .HasColumnType("int");

                    b.Property<float>("X")
                        .HasColumnType("real");

                    b.Property<float>("Y")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("AuditorId");

                    b.HasIndex("ClientId");

                    b.HasIndex("SurveyerId");

                    b.HasIndex("UnitTypeId");

                    b.ToTable("Requests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminId = 32,
                            Area = 100m,
                            AuditorId = 5,
                            Building = "Royal Tower",
                            CityId = 1,
                            ClientId = 102,
                            CreatedAt = new DateTime(2024, 5, 24, 18, 5, 0, 720, DateTimeKind.Local).AddTicks(4766),
                            District = "Zamalek",
                            FloorCount = 5,
                            OwnerAddress = "123 Main St",
                            PhoneNumber = "1234567890",
                            Street = "Nile St",
                            SurveyerId = 1,
                            UnitNumber = "A101",
                            X = 30.12345f,
                            Y = 31.98765f
                        });
                });

            modelBuilder.Entity("RealState.Domain.Entities.RequestLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("RequestLog");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreationDate = new DateTime(2024, 5, 24, 18, 5, 0, 720, DateTimeKind.Local).AddTicks(4783),
                            RequestId = 1,
                            Status = "Pending",
                            UserId = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = 2,
                            CreationDate = new DateTime(2024, 5, 24, 18, 5, 0, 720, DateTimeKind.Local).AddTicks(4788),
                            RequestId = 1,
                            Status = "New",
                            UserId = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = 3,
                            CreationDate = new DateTime(2024, 5, 24, 18, 5, 0, 720, DateTimeKind.Local).AddTicks(4791),
                            RequestId = 1,
                            Status = "Paid",
                            UserId = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = 4,
                            CreationDate = new DateTime(2024, 5, 24, 18, 5, 0, 720, DateTimeKind.Local).AddTicks(4794),
                            RequestId = 1,
                            Status = "Assigned To Company",
                            UserId = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = 5,
                            CreationDate = new DateTime(2024, 5, 24, 18, 5, 0, 720, DateTimeKind.Local).AddTicks(4797),
                            RequestId = 1,
                            Status = "Assigned To Surveyer",
                            UserId = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = 6,
                            CreationDate = new DateTime(2024, 5, 24, 18, 5, 0, 720, DateTimeKind.Local).AddTicks(4803),
                            RequestId = 1,
                            Status = "AppointMent Arrangement",
                            UserId = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = 7,
                            CreationDate = new DateTime(2024, 5, 24, 18, 5, 0, 720, DateTimeKind.Local).AddTicks(4806),
                            RequestId = 1,
                            Status = "Pending For Company Review",
                            UserId = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = 8,
                            CreationDate = new DateTime(2024, 5, 24, 18, 5, 0, 720, DateTimeKind.Local).AddTicks(4809),
                            RequestId = 1,
                            Status = "Pending For User Data Completion",
                            UserId = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = 9,
                            CreationDate = new DateTime(2024, 5, 24, 18, 5, 0, 720, DateTimeKind.Local).AddTicks(4812),
                            RequestId = 1,
                            Status = "Pending For Surveyer Completion",
                            UserId = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = 10,
                            CreationDate = new DateTime(2024, 5, 24, 18, 5, 0, 720, DateTimeKind.Local).AddTicks(4816),
                            RequestId = 1,
                            Status = "Cancelled By User",
                            UserId = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = 11,
                            CreationDate = new DateTime(2024, 5, 24, 18, 5, 0, 720, DateTimeKind.Local).AddTicks(4819),
                            RequestId = 1,
                            Status = "Completed",
                            UserId = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c",
                            UserType = "Client"
                        },
                        new
                        {
                            Id = 12,
                            CreationDate = new DateTime(2024, 5, 24, 18, 5, 0, 720, DateTimeKind.Local).AddTicks(4823),
                            RequestId = 1,
                            Status = "Pendingfor Authority Review",
                            UserId = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c",
                            UserType = "Client"
                        });
                });

            modelBuilder.Entity("RealState.Domain.Entities.Surveyer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Nationality")
                        .HasColumnType("int");

                    b.Property<int>("SSN")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Surveyers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CompanyId = 1,
                            FName = "Suzan",
                            LName = "Doe",
                            Nationality = 0,
                            SSN = 0,
                            UserId = "49d53bf1-d7fc-4719-a047-9335b8ef9fda"
                        });
                });

            modelBuilder.Entity("RealState.Domain.Entities.UnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitTypes");
                });

            modelBuilder.Entity("RealState.Domain.Entities.UploadFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FileType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RequestId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RequestId");

                    b.ToTable("UploadFiles");
                });

            modelBuilder.Entity("RealState.Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0d3dea4c-2c77-4d00-b497-3c670cf8c40c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54f366c3-8489-46e1-9b1d-44d8bd5558c3",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "896e272a-222e-4942-a9fa-5960a7fa4dce",
                            TwoFactorEnabled = false,
                            UserName = "Sara"
                        },
                        new
                        {
                            Id = "1381877e-4124-4662-b3cc-7ed2a9176fe4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14382ec1-8d00-44a0-9636-c7cca36e74e8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bdd53c78-9bff-4716-a0bd-b25054a583d0",
                            TwoFactorEnabled = false,
                            UserName = "Jakson"
                        },
                        new
                        {
                            Id = "49d53bf1-d7fc-4719-a047-9335b8ef9fda",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "398b57a7-272f-41ea-abfe-6861f71854e8",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "99555b41-4b86-4690-96b9-282fe849ea5b",
                            TwoFactorEnabled = false,
                            UserName = "Michael"
                        },
                        new
                        {
                            Id = "1b8e4523-e299-42b7-aeeb-fd4577402407",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6027720-326e-4c00-bcfd-684c484e7f11",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28bbd33e-cd67-4854-b14f-e2be4b00b867",
                            TwoFactorEnabled = false,
                            UserName = "John"
                        });
                });

            modelBuilder.Entity("RealState.Infrastructure.Identity.Models.PlatformRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a156dfdd-3a37-4e02-90ad-f8697ccbc506",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "bef7a958-2903-403a-911d-641cac1b2cd8",
                            Name = "Client",
                            NormalizedName = "CLIENT"
                        },
                        new
                        {
                            Id = "559c9cc2-42cc-4df9-a6b6-4f7f0901a219",
                            Name = "Surveyer",
                            NormalizedName = "SURVEYER"
                        },
                        new
                        {
                            Id = "4141ecc6-1af5-4823-8065-a6b9a6dfb65d",
                            Name = "Auditor",
                            NormalizedName = "AUDITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("RealState.Infrastructure.Identity.Models.PlatformRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RealState.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RealState.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("RealState.Infrastructure.Identity.Models.PlatformRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealState.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RealState.Domain.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealState.Domain.Entities.Appartment", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Request", "Request")
                        .WithOne()
                        .HasForeignKey("RealState.Domain.Entities.Appartment", "RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RealState.Domain.Entities.Request", null)
                        .WithOne("Appartment")
                        .HasForeignKey("RealState.Domain.Entities.Appartment", "RequestId1");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("RealState.Domain.Entities.AppartmentArea", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Appartment", "Appartment")
                        .WithMany("AppartmentAreas")
                        .HasForeignKey("AppartmentId");

                    b.Navigation("Appartment");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Auditor", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Company", "Company")
                        .WithMany("Auditors")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RealState.Domain.Entities.City", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Governorate", "Governorate")
                        .WithMany("Cities")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Governorate");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Request", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Admin", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealState.Domain.Entities.Auditor", "Auditor")
                        .WithMany()
                        .HasForeignKey("AuditorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealState.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RealState.Domain.Entities.Surveyer", "Surveyer")
                        .WithMany()
                        .HasForeignKey("SurveyerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RealState.Domain.Entities.UnitType", "UnitType")
                        .WithMany()
                        .HasForeignKey("UnitTypeId");

                    b.Navigation("Admin");

                    b.Navigation("Auditor");

                    b.Navigation("Client");

                    b.Navigation("Surveyer");

                    b.Navigation("UnitType");
                });

            modelBuilder.Entity("RealState.Domain.Entities.RequestLog", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Surveyer", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Company", "Company")
                        .WithMany("Surveyers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("RealState.Domain.Entities.UploadFile", b =>
                {
                    b.HasOne("RealState.Domain.Entities.Request", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Appartment", b =>
                {
                    b.Navigation("AppartmentAreas");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Company", b =>
                {
                    b.Navigation("Auditors");

                    b.Navigation("Surveyers");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Governorate", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("RealState.Domain.Entities.Request", b =>
                {
                    b.Navigation("Appartment");
                });
#pragma warning restore 612, 618
        }
    }
}
